<?php

/**
 * @file
 * Entityreference modal widget module.
 */

/**
 * Implements hook_menu().
 */
function entityreference_modal_widget_menu() {
  $items['entityreference_modal_widget/%ctools_js/modal/%/%/%/%'] = array(
    'title' => 'Entity reference modal widget modal content',
    'page callback' => 'entityreference_modal_widget_modal',
    'page arguments' => array(1, 3, 4, 5, 6),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['entityreference_modal_widget/ajax'] = array(
    'page callback' => 'entityreference_modal_widget_ajax',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function entityreference_modal_widget_theme() {
  return array(
    'entityreference_modal_widget_widget' => array(
      'render element' => 'widget',
    ),
    'entityreference_modal_widget_rows' => array(
      'render element' => 'rows',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function entityreference_modal_widget_field_widget_info() {
  $widgets['entityreference_modal_widget'] = array(
    'label' => t('Modal'),
    'description' => t('An advanced, modal extensible widget.'),
    'field types' => array('entityreference'),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function entityreference_modal_widget_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'entityreference_modal_widget') {
    // Generate a list of available plugins.
    ctools_include('plugins');
    $plugins = ctools_get_plugins('entityreference_modal_widget', 'ermw_modal');
    $plugin_options = array();
    foreach ($plugins as $id => $plugin) {
      $plugin_options[$id] = $plugin['label'];
    }

    if (empty($plugin_options)) {
      $element['message'] = array(
        '#markup' => t('Sorry no operation plugins available in the system.'),
      );
      return $element;
    }

    $element['plugin'] = array(
      '#type' => 'select',
      '#title' => t('Plugin'),
      '#options' => $plugin_options,
      '#default_value' => isset($settings['plugin']) ? $settings['plugin'] : '',
    );

    // Get the options form for the selected plugin.
    if (isset($settings['plugin'])
      && ($plugin = entityreference_modal_widget_plugin_instance($settings['plugin']))) {
      $element += $plugin->options_form($settings);
    }

    $element['close_modal'] = array(
      '#type' => 'checkbox',
      '#title' => t('Close modal window after submitting the items'),
      '#description' => t('If enabled, the modal window will close after you had selected the entities and submitted your selection.'),
      '#default_value' => isset($settings['close_modal']) ? $settings['close_modal'] : '',
    );
  }

  return $element;
}

/**
 * Implements hook_field_widget_form().
 */
function entityreference_modal_widget_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Build the path of the element.
  $parents_path = $field['field_name'];
  if (!empty($form['#parents'])) {
    $parents = $form['#parents'];
    $first_parent = array_shift($parents);
    $parents_path = $first_parent . '[' . implode('][', $parents) . '][' . $field['field_name'] . ']';
  }

  $frontend_id = drupal_html_id($field['field_name']);
  $settings_selector = 'entityreference-modal-widget-' . $frontend_id . '-settings';
  $form['#after_build'][] = 'entityreference_modal_widget_add_resources';

  // Generate an array of settings that will be needed later and we pass around
  // in a hidden element.
  $settings = array(
    'langcode' => $langcode,
    'table_id' => $frontend_id . '-values',
    'target_type' => $field['settings']['target_type'],
    'cardinality' => $field['cardinality'],
    'element' => $parents_path,
    'required' => $instance['required'],
    'field_label' => $instance['label'],
    'close_modal' => $instance['widget']['settings']['close_modal'],
    'plugin' => $instance['widget']['settings']['plugin'],
    'field_name' => $field['field_name'],
    'entity_type' => $instance['entity_type'],
    'bundle' => $instance['bundle'],
  );

  $element[$field['field_name'] . '_settings'] = array(
    '#type' => 'hidden',
    '#default_value' => drupal_json_encode($settings),
    '#weight' => 100,
    '#attributes' => array(
      'id' => $settings_selector,
    ),
    '#name' => $field['field_name'] . '_settings',
  );

  $element['#theme'] = 'entityreference_modal_widget_widget';
  $element['#cardinality'] = $field['cardinality'];

  $add_more_id = "add-more-" . $field['field_name'];

  // Set the modal URL that this field 'add more' button will use.
  $element['modal_url_' . $field['field_name']] = array(
    '#type' => 'hidden',
    '#value' => url('entityreference_modal_widget/nojs/modal/' . $settings_selector . '/' . $instance['field_name'] . '/' . $instance['entity_type'] . '/' . $instance['bundle']),
    '#attributes' => array('class' => array($add_more_id . '-url')),
    '#name' => 'modal_url_' . $field['field_name'],
  );

  $add_more_text = ($field['cardinality'] == 1) ? 'Add item' : 'Add items';
  $element['add_more'] = array(
    '#type' => 'submit',
    '#value' => $add_more_text,
    '#attributes' => array(
      'id' => $add_more_id,
      'title' => $add_more_text,
      'class' => array('ctools-use-modal', 'button'),
    ),
    '#name' => $field['field_name'] . '_add_more',
    '#element_validate' => array('entityreference_modal_widget_validate'),
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'entityreference_modal_widget') . '/entityreference_modal_widget.css'),
    ),
    '#settings' => $settings,
  );

  foreach ($items as $delta => $item) {
    $element[$delta] = entityreference_modal_widget_row($delta, $parents_path, $field['settings']['target_type'], $langcode, $item['target_id'], count($items));
  }

  return $element;
}

/**
 * Attach the required js and libraries for the widget.
 */
function entityreference_modal_widget_add_resources($form, &$form_state) {
  ctools_include('ajax');
  ctools_include('modal');
  ctools_include('plugins');
  ctools_modal_add_js();

  drupal_add_js(drupal_get_path('module', 'entityreference_modal_widget') . '/entityreference_modal_widget.js');

  return $form;
}

/**
 * Pushes input values to form state.
 */
function entityreference_modal_widget_validate($element, &$form_state, $form) {
  array_pop($element['#parents']);
  $input = drupal_array_get_nested_value($form_state['input'], $element['#parents']);

  if (!empty($input)) {
    $max_delta = count($input);
    $rows = array();
    foreach ($input as $delta => $value) {
      if (!empty($value['target_id'])) {
        $rows[$delta] = entityreference_modal_widget_row($delta, $element['#settings']['element'], $element['#settings']['target_type'], $element['#settings']['langcode'], $value['target_id'], $max_delta);
        $valid = TRUE;
      }
    }
    // Put back the rows in the form.
    form_set_value($element, $input, $form_state);
    $form_existing = drupal_array_get_nested_value($form, $element['#parents']);
    drupal_array_set_nested_value($form, $element['#parents'], array_merge($form_existing, $rows));
  }
  else {
    // This fix should be considered as a temporary solution (looks dirty for me). Issue #2177615.
    $form_state['values'][$element['#name']][LANGUAGE_NONE] = array();
  }

  if ($element['#settings']['required'] && empty($valid)) {
    form_set_error($element['#settings']['element'], t('@f field is required!', array('@f' => $element['#settings']['field_label'])));
  }
}

/**
 * Form that goes into the modal dialog.
 *
 * We call the render() method of the plugin to generate html content
 * that will be inserted into the form.
 *
 * We include standard visible for element but we also include several
 * hidden elements with information that must be received by the ajax
 * callback that will receive this page submit.
 */
function entityreference_modal_widget_modal_form($form, $form_state, $html, $settings, $post) {
  $form = array(
    '#type' => 'container',
    '#attributes' => array(
      'id' => 'entityreference-modal-widget-modal-submit',
    )
  );

  // Include the plugin generated html in the form.
  $form['html'] = array(
    '#type' => 'markup',
    '#markup' => $html,
    '#weight' => -10,
  );

  // We add a hidden element with the list of items that were already in the
  // field. We get that info from the posted values.
  $field_name = $settings['field_name'];
  if (isset($post[$field_name]['und'])) {
    $form['erwm_items'] = array(
      '#type' => 'hidden',
      '#value' => drupal_json_encode($post[$field_name]['und']),
    );
  }

  // We store settings in the form.
  foreach ($settings as $key => $value) {
    $form[$key] = array(
      '#type' => 'hidden',
      '#value' => $settings[$key],
    );
  }

  // Element that allows to chose the position of the added items.
  $options = array(
    'bottom' => 'Add to the bottom',
    'top' => 'Add to the top',
  );
  $form['optposition'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#weight' => 10,
    '#name' => array('entityreference_modal_widget_options'),
  );

  // Set the url where the submit button will call via ajax.
  $form['modal_url'] = array(
    '#type' => 'hidden',
    '#value' => url('entityreference_modal_widget/ajax'),
    '#attributes' => array('class' => array('button-add-url')),
  );

  $form['button_add'] = array(
    '#type' => 'button',
    '#value' => t('Submit'),
    '#attributes' => array(
      'class' => array('button', 'ctools-use-modal'),
      'id' => 'button-add',
    ),
    '#weight' => 20,
  );

  return $form;
}

/**
 * Callback for ctools modal window.
 *
 * @param string $mode
 *   Mode: js or nojs.
 * @param string $name
 *   Machine name of the target view.
 * @param string $display
 *   Display name of the target view.
 * @param string $settings_selector
 *   The dom selector of the settings element.
 */
function entityreference_modal_widget_modal($mode, $settings_selector, $field_name, $entity_type, $bundle) {
  ctools_include('modal');
  ctools_include('ajax');

  $post = $_POST;

  // Decode the posted settings.
  $settings = drupal_json_decode($post[$field_name . '_settings']);

  $instance = field_info_instance($settings['entity_type'], $field_name, $settings['bundle']);

  $output = '';

  $plugin_name = $settings['plugin'];
  if (!empty($plugin_name)) {
    // Get a instance of the selected plugin.
    $plugin = entityreference_modal_widget_plugin_instance($plugin_name);

    // Call the render method, pass the settings.
    $html = $plugin->render($instance['widget']['settings']);

    // Generate the form, we pass the plugin html to be included.
    $form = drupal_get_form('entityreference_modal_widget_modal_form', $html, $settings, $post);

    $output = drupal_render($form);
  }

  return ctools_modal_render(t('Select entities'), $output);
}

/**
 * Ajax callback to transform selected entity IDs into table rows.
 *
 * We don't return html here anymore. We generate a list of ajax commands
 * that will replace the content of the entity reference field and also
 * perform other alterations to the node form.
 */
function entityreference_modal_widget_ajax() {
  ctools_include('ajax');
  ctools_include('modal');

  $post = $_POST;

  $item_count = 0;

  // Generate rows for items that already existed in the field.
  $old_rows = array();
  $existing_items = drupal_json_decode($post['erwm_items']);
  if (is_array($existing_items)) {
    foreach ($existing_items as $item) {
      $entity_id = $item['target_id'];
      $old_rows[] = entityreference_modal_widget_row($item_count, $post['element'], $post['target_type'], $post['langcode'], $entity_id, count($existing_items));
      $item_count++;
    }
  }

  // Get the list of new ids, this is plugin dependent.
  $plugin_name = $post['plugin'];
  if ($plugin = entityreference_modal_widget_plugin_instance($plugin_name)) {
    // Ask the plugin to interpret the posted values and generate a list of entity_ids.
    $entity_ids = $plugin->get_entity_ids($post);
  }

  // Generate rows for the items that were added in the modal.
  $new_rows = array();
  $max = count($existing_items) + count($entity_ids);
  foreach ($entity_ids as $entity_id) {
    $new_rows[] = entityreference_modal_widget_row($item_count, $post['element'], $post['target_type'], $post['langcode'], $entity_id, $max);
    $item_count++;
  }

  // Merge the two lists depending on the option to prepend or append.
  switch ((string)$post['entityreference_modal_widget_options']) {
    case 'top':
      $rows = array_merge($new_rows, $old_rows);
      break;
    default:
      // By default new items go to the bottom of the list.
      $rows = array_merge($old_rows, $new_rows);
  }

  // Add required info to properly theme the rows element.
  $rows['#theme'] = 'entityreference_modal_widget_rows';
  $rows['#cardinality'] = $post['cardinality'];

  $commands = array();
  if (!empty($entity_ids)) {
    // Render the rows html, we are going to insert this into the table later.
    $html_replace = render($rows);

    $table_id = drupal_html_id($post['field_name']) . '-values';
    $selector = '#' . $table_id . ' tbody';

    // Command to insert generated rows html into the table.
    // We don't use ajax_command_html because a bug inserts a div in some cases
    // that breaks the table. See: https://drupal.org/node/736066
    $commands[] = ajax_command_invoke($selector, 'html', array($html_replace));
  }

  // Invoke the js to rebuild the draggable table.
  // This is a custom ajax command. See: entityreference_modal_widget.js
  $commands[] = array(
    'command' => 'ermw_redrag',
    'table_id' => $table_id,
  );

  // Add a command to close the modal dialog.
  $commands[] = ctools_modal_command_dismiss();

  print ajax_render($commands);
}

/**
 * Returns a render array for a single field value.
 */
function entityreference_modal_widget_row($delta, $element, $target_type, $langcode, $target_id, $max_delta) {
  $frontend_id = 'edit-' . str_replace('_', '-', $element) . '-' . $langcode . '-' . $delta;
  $entities = entity_load($target_type, array($target_id));
  $label = entity_label($target_type, current($entities));
  $name = $element . '[' . $langcode . '][' . $delta . ']';

  $row = array(
    'target_id' => array(
      '#type' => 'checkbox',
      '#delta' => $delta,
      '#field_suffix' => '<label class="option" for="' . $frontend_id . '">' . $label . '</label>',
      '#return_value' => $target_id,
      '#value' => $target_id,
      '#title_display' => 'after',
      '#name' => $name . '[target_id]',
      '#attributes' => array(
        'checked' => 'checked',
        'id' => $frontend_id,
        'data-delta' => $delta,
      ),
    ),
    '_weight' => array(
      '#type' => 'select',
      '#options' => entityreference_modal_widget_weights($max_delta),
      '#title' => t('Weight'),
      '#value' => $delta,
      '#title_display' => 'invisible',
      '#name' => $name . '[_weight]',
      '#attributes' => array(
        'id' => $frontend_id . '-weight',
        'class' => array(drupal_html_class($element . '-delta-order')),
      ),
    ),
  );

  return $row;
}

/**
 * Generate weight select list values depending on the amount of field values.
 *
 * @param int $max_delta
 *
 * @return array
 */
function entityreference_modal_widget_weights($max_delta) {
  $weights = array();

  for ($i = 0; $i <= $max_delta; $i++) {
    $weights[$i] = $i;
    if ($i) {
      $weights[-$i] = -$i;
    }
  }

  ksort($weights);

  return $weights;
}

/**
 * Theme function for the whole widget.
 */
function theme_entityreference_modal_widget_widget($variables) {
  $widget = $variables['widget'];
  $table_id = $widget['add_more']['#settings']['table_id'];
  $order_class = drupal_html_class($widget['add_more']['#settings']['element'] . '-delta-order');
  $required = !empty($widget['add_more']['#settings']['required']) ? theme('form_required_marker', $variables) : '';

  $header = array(
    array(
      'data' => '<label>' . t('!title !required', array('!title' => $widget['#title'], '!required' => $required)) . "</label>",
      'colspan' => 2,
      'class' => array('field-label'),
    ),
  );
  if ($widget['#cardinality'] !== '1') {
    $header[] = array(
      'data' => t('Order'),
      'class' => array('tabledrag-hide'),
    );
  }
  $rows = array();

  $field_name = $widget['#field_name'];

  $items = array();
  foreach (element_children($widget) as $key) {
    switch ((string)$key) {
      case 'add_more':
        $add_more_button = &$widget[$key];
        break;
      case 'modal_url_' . $field_name:
        $modal_url_hidden = &$widget[$key];
        break;
      case $field_name . '_settings':
        $settings_hidden = &$widget[$key];
        break;
      default:
        if (is_numeric($key)) {
          $items[] = &$widget[$key];
        }
    }
  }
  // Sort items according to '_weight' (needed when the form comes back after
  // preview or failed validation)
  usort($items, '_field_sort_items_value_helper');

  // Add the items as table rows.
  foreach ($items as $key => $item) {
    $item['_weight']['#attributes']['class'] = array($order_class);
    $delta_element = drupal_render($item['_weight']);
    $cells = array(
      array('data' => '', 'class' => array('field-multiple-drag')),
      drupal_render($item),
    );
    if ($widget['#cardinality'] !== '1') {
      $cells[] = array('data' => $delta_element, 'class' => array('delta-order'));
    }
    $rows[] = array(
      'data' => $cells,
      'class' => array('draggable'),
    );
  }

  if (empty($rows)) {
    $rows[][] = array(
      'data' => t('No items had been added yet. Click "Add items" to launch the widget.'),
      'colspan' => '3',
    );
  }

  $output = '<div class="form-item">';
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(
      'id' => $table_id,
      'class' => array('field-multiple-table')
    ),
  ));
  $output .= $widget['#description'] ? '<div class="description">' . $widget['#description'] . '</div>' : '';
  $output .= '<div class="clearfix">' . render($add_more_button) . '</div>';
  $output .= '<div class="clearfix">' . render($modal_url_hidden) . '</div>';
  $output .= '<div class="clearfix">' . render($settings_hidden) . '</div>';
  $output .= '</div>';

  if ($widget['#cardinality'] !== '1') {
    drupal_add_tabledrag($table_id, 'order', 'sibling', $order_class);
  }

  return $output;
}

/**
 * Theme function for a selection of table rows.
 */
function theme_entityreference_modal_widget_rows($variables) {
  $zebra = array('even' => 'odd');

  foreach (element_children($variables['rows']) as $row) {
    $output[$row]  = '<tr class="draggable ' . current($zebra) . '">';
    $output[$row] .= '<td class="field-multiple-drag"></td>';
    $output[$row] .= '<td>' . render($variables['rows'][$row]['target_id']) . '</td>';
    if ($variables['rows']['#cardinality'] !== '1') {
      $output[$row] .= '<td class="delta-order tabledrag-hide">' . render($variables['rows'][$row]['_weight']) . '</td>';
    }
    $output[$row] .= '</tr>';

    $zebra = array_flip($zebra);
  }

  return implode("\n", $output);
}

/**
 * Implements hook_ctools_plugin_type().
 */
function entityreference_modal_widget_ctools_plugin_type() {
  $return = array();

  $return['ermw_modal'] = array(
    'use hooks' => TRUE,
  );

  return $return;
}

/**
 * Returns a modal plugin instance.
 *
 * @param $id
 * @return entityreference_modal_widget
 */
function entityreference_modal_widget_plugin_instance($id) {
  $instances = &drupal_static(__FUNCTION__);

  if (!isset($instances[$id])) {
    ctools_include('plugins');
    $plugin = ctools_get_plugins('entityreference_modal_widget', 'ermw_modal', $id);
    $class = ctools_plugin_get_class($plugin, 'handler');
    $instances[$id] = new $class();

    // Check that plugin class has inherited proper parent class.
    if (!is_subclass_of($instances[$id], 'entityreference_modal_widget')) {
      $instances[$id] = NULL;
    }
  }

  return $instances[$id];
}
